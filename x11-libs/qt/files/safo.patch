diff -uwBr qt-x11-free-3.3.8b-gentoo/include/qsqlselectcursor.h qt-x11-free-3.3.8b/include/qsqlselectcursor.h
--- qt-x11-free-3.3.8b-gentoo/include/qsqlselectcursor.h	2008-01-15 20:09:13.000000000 +0100
+++ qt-x11-free-3.3.8b/include/qsqlselectcursor.h	2009-06-15 11:17:34.000000000 +0200
@@ -59,6 +59,7 @@
 {
 public:
     QSqlSelectCursor( const QString& query = QString::null, QSqlDatabase* db = 0 );
+    QSqlSelectCursor( const QString& query , QSqlDatabase* db  , bool execute  );
     QSqlSelectCursor( const QSqlSelectCursor& other );
     ~QSqlSelectCursor();
     bool exec( const QString& query );
diff -uwBr qt-x11-free-3.3.8b-gentoo/src/sql/qdatatable.cpp qt-x11-free-3.3.8b/src/sql/qdatatable.cpp
--- qt-x11-free-3.3.8b-gentoo/src/sql/qdatatable.cpp	2008-01-15 20:09:13.000000000 +0100
+++ qt-x11-free-3.3.8b/src/sql/qdatatable.cpp	2009-06-15 11:17:14.000000000 +0200
@@ -1641,12 +1641,21 @@
 	d->haveAllRows = TRUE;
     // small hack to prevent QTable from moving the view when a row
     // is selected and the contents is resized
+    // poprawka na multiselect
+    QValueList<QTableSelection> sels;
+    for( int i = 0; i < numSelections(); ++i )
+        sels.append( selection( i ) );
+  
     SelectionMode m = selectionMode();
     clearSelection();
     setSelectionMode( NoSelection );
     setNumRows( endIdx + 1 );
     sqlCursor()->seek( currentRow() );
     setSelectionMode( m );
+
+    // poprawka na multiselect c.d.
+    for( QValueList<QTableSelection>::Iterator it = sels.begin(); it != sels.end(); ++it )
+        addSelection( *it );
 }
 
 /*! \internal */
diff -uwBr qt-x11-free-3.3.8b-gentoo/src/sql/qsqlselectcursor.cpp qt-x11-free-3.3.8b/src/sql/qsqlselectcursor.cpp
--- qt-x11-free-3.3.8b-gentoo/src/sql/qsqlselectcursor.cpp	2008-01-15 20:09:13.000000000 +0100
+++ qt-x11-free-3.3.8b/src/sql/qsqlselectcursor.cpp	2009-06-15 11:17:13.000000000 +0200
@@ -94,6 +94,18 @@
 	exec( query );
 }
 
+QSqlSelectCursor::QSqlSelectCursor( const QString& query, QSqlDatabase* db , bool execute )
+    : QSqlCursor( QString::null, FALSE, db )
+{
+    d = new QSqlSelectCursorPrivate;
+    d->query = query;
+    QSqlCursor::setMode( ReadOnly );
+    if ( !query.isNull() )
+	if ( execute )	
+		exec( query );
+}
+
+
 /*! Constructs a copy of \a other */
 QSqlSelectCursor::QSqlSelectCursor( const QSqlSelectCursor& other )
     : QSqlCursor( other )
@@ -109,6 +121,14 @@
     delete d;
 }
 
+QSqlSelectCursor& QSqlSelectCursor::operator=( const QSqlSelectCursor& other )
+{
+    QSqlCursor::operator=( other );
+    d->query = other.d->query;
+    d->populated = other.d->populated;
+    return *this;
+}
+
 /*! \reimp */
 bool QSqlSelectCursor::exec( const QString& query )
 {
diff -uwBr qt-x11-free-3.3.8b-gentoo/src/sql/qsqlselectcursor.h qt-x11-free-3.3.8b/src/sql/qsqlselectcursor.h
--- qt-x11-free-3.3.8b-gentoo/src/sql/qsqlselectcursor.h	2008-01-15 20:09:13.000000000 +0100
+++ qt-x11-free-3.3.8b/src/sql/qsqlselectcursor.h	2009-06-15 11:17:13.000000000 +0200
@@ -59,10 +59,12 @@
 {
 public:
     QSqlSelectCursor( const QString& query = QString::null, QSqlDatabase* db = 0 );
+    QSqlSelectCursor( const QString& query , QSqlDatabase* db  , bool execute  );
     QSqlSelectCursor( const QSqlSelectCursor& other );
     ~QSqlSelectCursor();
     bool exec( const QString& query );
     bool select() { return QSqlCursor::select(); }
+    QSqlSelectCursor& operator=( const QSqlSelectCursor& other );
     
 protected:
     QSqlIndex primaryIndex( bool = TRUE ) const { return QSqlIndex(); }
diff -uwBr qt-x11-free-3.3.8b-gentoo/src/table/qtable.cpp qt-x11-free-3.3.8b/src/table/qtable.cpp
--- qt-x11-free-3.3.8b-gentoo/src/table/qtable.cpp	2008-01-15 20:09:13.000000000 +0100
+++ qt-x11-free-3.3.8b/src/table/qtable.cpp	2009-06-15 11:17:26.000000000 +0200
@@ -4666,7 +4666,8 @@
 
 int QTable::rowHeight( int row ) const
 {
-    return leftHeader->sectionSize( row );
+//    return leftHeader->sectionSize( row );
+    return QMAX(leftHeader->sectionSize( row ), QFontMetrics(QApplication::font(this)).height());
 }
 
 /*!
@@ -5858,6 +5859,8 @@
 	}
     }
     h = QMAX( h, QApplication::globalStrut().height() );
+//    h = QMAX( h, QApplication::fontMetrics().height() );
+    h = QMAX( h, QFontMetrics(QApplication::font(this)).height() );
     setRowHeight( row, h );
 }
 
